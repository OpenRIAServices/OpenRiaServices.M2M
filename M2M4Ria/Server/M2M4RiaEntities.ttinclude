<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
//
// Change the file path below to the path of the M2M4RiaShared.ttinclude in your project
//
#>
<#@ include file="..\Shared\M2M4RiaShared.ttinclude" #>
<#

M2MData m2mData = GenerateM2MData();

#>
// Instruct compiler not to warn about usage of obsolete members, because using them is intended.
#pragma warning disable 618


namespace <#= EntityModelNamespace #>
{
	#region Entities

	using System;
	using System.Collections.Generic;
	using System.ComponentModel.DataAnnotations;
	using System.Runtime.Serialization;
	using System.ServiceModel.DomainServices.Server;
    using System.Xml.Serialization;
	using M2M4Ria;

	//
	// Association Entity Types
	//
<#
	foreach(M2MAssociationSet associationSet in m2mData.Associations)
	{
		string fromFKIdPrivate = "_" + associationSet.Entity2ToLink.FK;
		string fromPKId = associationSet.Entity2ToLink.Entity + "." + associationSet.Entity2ToLink.PK;
		string toFKIdPrivate = "_" + associationSet.Entity1ToLink.FK;
		string toPKId = associationSet.Entity1ToLink.Entity + "." + associationSet.Entity1ToLink.PK;

		// If entities on either side of the M2M relationship don't have a navigation property to each other, then there is no need to output this.
		if(associationSet.Entity1ToLink.HasM2MNavProp || associationSet.Entity2ToLink.HasM2MNavProp)
		{
#>
	[Obsolete("This class is only intended for use by the RIA M2M solution")]
	public partial class <#= associationSet.Name #>
	{
		// '<#= associationSet.Entity2ToLink.LinkTableNavProp #>' associationSet from '<#= associationSet.Entity2ToLink.Entity #>.<#= associationSet.Entity2ToLink.PK #>' to '<#= associationSet.Name #>.<#= associationSet.Entity2ToLink.FK #>'
		private <#= associationSet.Entity2ToLink.DataType #> <#= fromFKIdPrivate #>;

		[DataMember]
		[Key]
		public <#= associationSet.Entity2ToLink.DataType #> <#= associationSet.Entity2ToLink.FK #>
		{
			get
			{
				if(<#= associationSet.Entity2ToLink.Entity #> != null)
				{
					if(<#= fromFKIdPrivate #> != <#= fromPKId #> && <#= fromFKIdPrivate #> == 0)
						<#= fromFKIdPrivate #> = <#= fromPKId #>;
				}
				return <#= fromFKIdPrivate #>;
			}
			set
			{
				<#= fromFKIdPrivate #> = value;
			}
		}

		[Include]
		[XmlIgnore]
		[Association("<#=associationSet.Entity2ToLink.LinkTableNavProp #>", "<#= associationSet.Entity2ToLink.FK #>", "<#= associationSet.Entity2ToLink.PK #>", IsForeignKey = true)]
		[DataMember]
		public <#= associationSet.Entity2ToLink.Entity #> <#= associationSet.Entity2ToLink.Entity #> { get; set; }

		// '<#= associationSet.Entity1ToLink.LinkTableNavProp #>' associationSet from '<#= associationSet.Entity1ToLink.Entity #>.<#= associationSet.Entity1ToLink.PK #>' to '<#= associationSet.Name #>.<#= associationSet.Entity1ToLink.FK #>'
		private <#= associationSet.Entity1ToLink.DataType #> <#= toFKIdPrivate #>;

		[DataMember]
		[Key]
		public <#= associationSet.Entity1ToLink.DataType #> <#= associationSet.Entity1ToLink.FK #>
		{
			get
			{
				if(<#= associationSet.Entity1ToLink.Entity #> != null)
				{
					if(<#= toFKIdPrivate #> != <#= toPKId #> && <#= toFKIdPrivate #> == 0)
						<#= toFKIdPrivate #> = <#= toPKId #>;
				}
				return <#= toFKIdPrivate #>;
			}
			set
			{
				<#= toFKIdPrivate #> = value;
			}
		}

		[Include]
		[XmlIgnore]
		[Association("<#= associationSet.Entity1ToLink.LinkTableNavProp #>", "<#= associationSet.Entity1ToLink.FK #>", "<#= associationSet.Entity1ToLink.PK #>", IsForeignKey = true)]
		[DataMember]
		public <#= associationSet.Entity1ToLink.Entity #> <#= associationSet.Entity1ToLink.Entity #> { get; set; }
	}
<#
		}
	}
#>
	//
	// Regular Entity Types
	//
<#
	foreach(M2MEntity entity in m2mData.Entities)
	{
#>
	public partial class <#= entity.Name #>
	{
<#
		foreach(M2MEntityAssociationSet associationSet in entity.Associations)
		{
			if(associationSet.ThisEntityToLink.HasM2MNavProp)
			{
				string ToAssociationSetPrivate = "_" + associationSet.OtherEntityToLink.LinkTableNavProp;
#>
		// '<#= associationSet.OtherEntityToLink.LinkTableNavProp #>' associationSet from '<#= associationSet.OtherEntityToLink.Entity #>.<#= associationSet.OtherEntityToLink.PK #>' to '<#= associationSet.Name #>.<#= associationSet.OtherEntityToLink.FK #>'
		private IEnumerable<<#= associationSet.Name #>> <#= ToAssociationSetPrivate #>;

		[Obsolete("This property is only intended for use by the RIA M2M solution")]
		[DataMember]
		[Include]
		[Association("<#= associationSet.ThisEntityToLink.LinkTableNavProp #>", "<#= associationSet.ThisEntityToLink.PK #>", "<#= associationSet.ThisEntityToLink.FK #>", IsForeignKey = false)]
		public IEnumerable<<#= associationSet.Name #>> <#= associationSet.OtherEntityToLink.LinkTableNavProp #>
		{
			get
			{
				if(<#= ToAssociationSetPrivate #> == null)
				{
					<#= ToAssociationSetPrivate #> = new EntityCollection<<#= associationSet.Name #>, <#= associationSet.OtherEntityToLink.Entity #>>
					(
						<#= associationSet.ThisEntityToLink.M2MNavProp #>,
						(r) => new <#= associationSet.Name #> { <#= associationSet.ThisEntityToLink.Entity  #> = this, <#= associationSet.OtherEntityToLink.Entity #> = r }
					);
				}
				return <#= ToAssociationSetPrivate #>;
			}
		}
<#
		}
	}
#>
	}
<#
	}
#>
	#endregion

	#region EntityCollection
	namespace M2M4Ria
	{
		using System;
		using System.Collections.Generic;
		using System.Linq;

		public class EntityCollection<JoinType, TEntity> : IEnumerable<JoinType> where JoinType : new()	where TEntity : class
		{
			private ICollection<TEntity> collection;
			private Func<TEntity, JoinType> newJoinType;
			/// <summary>
			/// Constructor
			/// </summary>
			/// <param name="collection">Entity collection that represents a m2m relation</param>
			/// <param name="newJoinType">The function used to create a new joint type entity and set both elements</param>
			public EntityCollection(ICollection<TEntity> collection,Func<TEntity, JoinType> newJoinType)
			{
				this.collection = collection;
				this.newJoinType = newJoinType;
			}
            /// <summary>
            ///     Constructs an enumerator of JoinType objects which forms a jointype view on the underlying many-2-many collection
            /// </summary>
            /// <returns>
			System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return this.GetEnumerator();
			}
			/// <summary>
			/// Construct an enumerator by creating JoinType objects for each element in the associated m2m collection
			/// </summary>
			/// <returns></returns>
			public IEnumerator<JoinType> GetEnumerator()
			{
				return collection.Select(newJoinType).GetEnumerator();
			}
			/// <summary>
			/// Not clear if this method should have an implementation. It is only called for newly created JoinType objects.
			/// However, the corresponding domainservice operation will already take the appropriate action to add a new association object.
			/// Is there a need to also add similar functionality here?
			/// </summary>
			/// <param name="entity"></param>
			public void Add(JoinType entity)
			{
				// Empty
			}
		}
	}
#endregion
}

// Restore compiler warnings when using obsolete methods
#pragma warning restore 618


