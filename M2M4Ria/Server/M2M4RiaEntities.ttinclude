<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
//
// Change the file path below to the path of the M2M4RiaShared.ttinclude in your project
//
#>
<#@ include file="..\Shared\M2M4RiaShared.ttinclude" #>
<#

M2MData m2mData = GenerateM2MData();

#>
// Instruct compiler not to warn about usage of obsolete members, because using them is intended.
#pragma warning disable 618

namespace <#= EntityModelNamespace #>
{
    #region Entities

    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices.Server;
    using System.Xml.Serialization;

    //
    // Association Entity Types
    //
<#
    foreach(M2MAssociationSet associationSet in m2mData.Associations)
    {
#>
    [Obsolete("This class is only intended for use by the RIA M2M solution")]
    public partial class <#= associationSet.Name #>
    {
<#
        // If entities on either side of the M2M relationship don't have a navigation property to each other, then there is no need to output this.
        if(associationSet.Entity1ToLink.HasM2MNavProp || associationSet.Entity2ToLink.HasM2MNavProp)
        {
			for (int kI = 0; kI < associationSet.Entity2ToLink.PK.Count; kI++)
			{
		        string fromFKIdPrivate = "_" + associationSet.Entity2ToLink.FK[kI];
		        string fromPKId = associationSet.Entity2ToLink.EntityNavProp + "." + associationSet.Entity2ToLink.PK[kI];
#>
        // '<#= associationSet.Entity2ToLink.LinkTableNavProp #>' associationSet from '<#= associationSet.Entity2ToLink.EntityNavProp #>.<#= associationSet.Entity2ToLink.PK[kI] #>' to '<#= associationSet.Name #>.<#= associationSet.Entity2ToLink.FK[kI] #>'
        private <#= associationSet.Entity2ToLink.PKDataType[kI] #> <#= fromFKIdPrivate #>;

        [DataMember]
        [Key]
        public <#= associationSet.Entity2ToLink.PKDataType[kI] #> <#= associationSet.Entity2ToLink.FK[kI] #>
        {
            get
            {
                if(<#= associationSet.Entity2ToLink.EntityNavProp #> != null)
                {
		            if(<#= fromFKIdPrivate #> != <#= fromPKId #> && <#= fromFKIdPrivate #> == default(<#=associationSet.Entity2ToLink.PKDataType[kI]#>))
					{
                        <#= fromFKIdPrivate #> = <#= fromPKId #>;
					}
                }
                return <#= fromFKIdPrivate #>;
            }
            set
            {
                <#= fromFKIdPrivate #> = value;
            }
        }
<#
			}
			for (int kI = 0; kI < associationSet.Entity1ToLink.PK.Count; kI++)
			{
		        string toFKIdPrivate = "_" + associationSet.Entity1ToLink.FK[kI];
		        string toPKId = associationSet.Entity1ToLink.EntityNavProp + "." + associationSet.Entity1ToLink.PK[kI];
#>

        // '<#= associationSet.Entity1ToLink.LinkTableNavProp #>' associationSet from '<#= associationSet.Entity1ToLink.EntityNavProp #>.<#= associationSet.Entity1ToLink.PK[kI] #>' to '<#= associationSet.Name #>.<#= associationSet.Entity1ToLink.FK[kI] #>'
        private <#= associationSet.Entity1ToLink.PKDataType[kI] #> <#= toFKIdPrivate #>;

        [DataMember]
        [Key]
        public <#= associationSet.Entity1ToLink.PKDataType[kI] #> <#= associationSet.Entity1ToLink.FK[kI] #>
        {
            get
            {
                if(<#= associationSet.Entity1ToLink.EntityNavProp #> != null)
                {
		            if(<#= toFKIdPrivate #> != <#= toPKId #> && <#= toFKIdPrivate #> == default(<#=associationSet.Entity1ToLink.PKDataType[kI]#>))
					{
                        <#= toFKIdPrivate #> = <#= toPKId #>;
					}
                }
                return <#= toFKIdPrivate #>;
            }
            set
            {
                <#= toFKIdPrivate #> = value;
            }
        }
<#
        	}
		}
#>

        [Include]
        [XmlIgnore]
        [Association("<#=associationSet.Entity2ToLink.LinkTableNavProp #>", "<#= associationSet.Entity2ToLink.FK.Aggregate((c,n) => c + "," + n) #>", "<#= associationSet.Entity2ToLink.PK.Aggregate((c,n) => c + "," + n) #>", IsForeignKey = true)]
        [DataMember]
        public <#= associationSet.Entity2ToLink.Entity #> <#= associationSet.Entity2ToLink.EntityNavProp #> { get; set; }

        [Include]
        [XmlIgnore]
        [Association("<#= associationSet.Entity1ToLink.LinkTableNavProp #>", "<#= associationSet.Entity1ToLink.FK.Aggregate((c,n) => c + "," + n) #>", "<#= associationSet.Entity1ToLink.PK.Aggregate((c,n) => c + "," + n) #>", IsForeignKey = true)]
        [DataMember]
        public <#= associationSet.Entity1ToLink.Entity #> <#= associationSet.Entity1ToLink.EntityNavProp #> { get; set; }
    }
<#
        }
#>
    //
    // Regular Entity Types
    //
<#
    foreach(M2MEntity entity in m2mData.Entities)
    {
#>
    public partial class <#= entity.Name #>
    {
<#
        foreach(M2MEntityAssociationSet associationSet in entity.Associations)
        {
            if(associationSet.ThisEntityToLink.HasM2MNavProp)
            {
                string ToAssociationSetPrivate = "_" + associationSet.OtherEntityToLink.LinkTableNavProp;
#>
        [Obsolete("This property is only intended for use by the RIA M2M solution")]
        [DataMember]
        [Include]
        [Association("<#= associationSet.ThisEntityToLink.LinkTableNavProp #>", "<#= associationSet.ThisEntityToLink.PK.Aggregate((c,n) => c + "," + n) #>", "<#= associationSet.ThisEntityToLink.FK.Aggregate((c,n) => c + "," + n) #>", IsForeignKey = false)]
        public IList<<#= associationSet.Name #>> <#= associationSet.OtherEntityToLink.LinkTableNavProp #>
        {
            get
            {
                Func<<#= associationSet.OtherEntityToLink.Entity #>, <#= associationSet.Name #>> makeJoinType = 
                    e => new <#= associationSet.Name #> { <#= associationSet.ThisEntityToLink.EntityNavProp  #> = this, <#= associationSet.OtherEntityToLink.EntityNavProp #> = e };
                return <#= associationSet.ThisEntityToLink.M2MNavProp #>.Select(makeJoinType).ToList();
            }
        }
<#
        }
    }
#>
    }
<#
    }
#>
    #endregion
}

// Restore compiler warnings when using obsolete methods
#pragma warning restore 618


