<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".g.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

<#@ include file="../../shared/m2mgenerator.ttinclude" #>
<#
// Change the above to the relative location where the file m2mgenerator.ttinclude lives

// Change the line below to the relative location where the file M2MGenerator.xml lives */
string m2mRelationsXml = @"../M2MGenerator.xml";

Init(Host.ResolvePath(m2mRelationsXml));
#>
using EF.M2M;

namespace <#= DomainServiceNameSpace #>
{
    public partial class <#= DomainService #>
	{
<#
	foreach(var m2m in m2mRelations)
	{
		MakeInsertOperation(m2m);
		MakeDeleteOperation(m2m);
	}
#>
	 }
 }
<#+
private void MakeInsertOperation(string[] m2m) {
	string type1 = Name1(m2m);
	string id1 = Id1(m2m);
	string entitySet1 = Set1(m2m);
	string stub1 = Stub1(m2m);
	string toSet = ToSet(m2m);
	string type2 = Name2(m2m);
	string id2 = Id2(m2m);
	string entitySet2 = Set2(m2m);
	string stub2 = Stub2(m2m);
	string fromSet = FromSet(m2m);
	string relation = Relation(m2m);
	string varNameType1 = LowerInitial(type1);
	string varNameType2 = LowerInitial(type2);
	string varNameRelation = LowerInitial(relation);
#>
		public void Insert<#=relation#>(<#= relation #> <#= varNameRelation #> )
		{
<#+
			MakeGetType(type1, id1, stub1, entitySet1, relation);
			MakeGetType(type2, id2, stub2, entitySet2, relation);
#>
			<#= varNameType1 #>.<#=fromSet#>.Add(<#=varNameType2#>);
		}			
<#+
}
private void MakeDeleteOperation(string[] m2m) {
	string type1 = Name1(m2m);
	string id1 = Id1(m2m);
	string entitySet1 = Set1(m2m);
	string stub1 = Stub1(m2m);
	string toSet = ToSet(m2m);
	string type2 = Name2(m2m);
	string id2 = Id2(m2m);
	string entitySet2 = Set2(m2m);
	string stub2 = Stub2(m2m);
	string fromSet = FromSet(m2m);
	string relation = Relation(m2m);
	string varNameType1 = LowerInitial(type1);
	string varNameType2 = LowerInitial(type2);
	string varNameRelation = LowerInitial(relation);
#>
		public void Delete<#=relation #>(<#= relation #> <#= varNameRelation #> )
		{
<#+
			MakeGetType(type1, id1, stub1, entitySet1, relation);
			MakeGetType(type2, id2, stub2, entitySet2, relation);
#>

			<#= varNameType1 #>.<#=fromSet#>.Remove(<#=varNameType2#>);
		}
<#+
}
private void MakeGetType(string type, string id, string stub, string entitySet, string relation)	
{
	string varNameType = LowerInitial(type);
	string varNameRelation = LowerInitial(relation);
#>
			<#=type#> <#=varNameType#> = <#=varNameRelation#>.<#=type#>;
			if(<#=varNameType#> == null)
			{
				<#=type#> <#=type#>StubEntity = new <#=stub#> { <#=id#>  = <#=varNameRelation#>.<#=type#>Id };
				<#=varNameType#> = M2MTools.GetEntityByKey<<#=type#>>(ObjectContext, "<#=entitySet#>", <#=type#>StubEntity);
			}
<#+
}
#>