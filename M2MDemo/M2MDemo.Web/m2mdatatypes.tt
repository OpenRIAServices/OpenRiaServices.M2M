<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".g.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

<#@ include file="$(SolutionDir)/../shared/m2mgenerator.ttinclude" #>
<#
// Change the above to the relative location where the file m2mgenerator.ttinclude lives

// Change the line below to the relative location where the file M2MGenerator.xml lives */
string m2mRelationsXml = @"..//M2MGenerator.xml";

Init(Host.ResolvePath(m2mRelationsXml));
#>
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.ServiceModel.DomainServices.Server;
using M2M.EF;

namespace <#= EntityModelNameSpace #>  {
<#
   foreach(var m2m in m2mRelations)
{
#>
public partial class <#= Relation(m2m) #> {
<#
		MakeProperty(Name1(m2m), Id1(m2m), Relation(m2m));
		MakeProperty(Name2(m2m), Id2(m2m), Relation(m2m));
#>
	}
<#
	MakeClass(Name1(m2m), Id1(m2m), Name2(m2m), Id2(m2m), FromSet(m2m), Relation(m2m));
	MakeClass(Name2(m2m), Id2(m2m), Name1(m2m), Id1(m2m), ToSet(m2m), Relation(m2m));
}
#>
 }
<#+
private void MakeProperty(string propertyName, string Id, string relation)
{
		string localId = propertyName + "Id";
		string privateId = LowerInitial(localId);
#>
		int <#=privateId#>;
		[DataMember]
		[Key]
		public int <#=localId#>
		{
			get
			{
				if (<#=propertyName#> != null)
				{
					if (<#=privateId#> != <#=propertyName#>.<#=Id#> && <#=privateId#> == 0)
						<#=privateId#> = <#=propertyName#>.<#=Id#>;
				}
				return <#=privateId#>;
			}
			set
			{
				<#=privateId#> = value;
			}
		}
		[Include]
		[Association("<#=relation#>_<#=propertyName#>", "<#=localId#>", "<#=Id#>", IsForeignKey = true)]
		[DataMember]
		public <#=propertyName#> <#=propertyName#> { get; set; }
<#+
}

private void MakeClass(string type1, string id1, string type2, string id2, string set, string relation)
{
	string localId = type1 + "Id";
	string relationSet = relation + "_" + type2 + "Set";
#>
    public partial class <#= type1 #>
    {
        private  EntityCollection<<#=relation#>,<#=type2#>> _<#=relationSet#>;
        [DataMember]
        [Include]
        [Association("<#= relation #>_<#=type1#>", "<#=id1#>", "<#=localId#>")]
        public EntityCollection<<#=relation#>,<#=type2#>><#=relationSet#> { 
			get{
				if(_<#=relationSet#> == null)
				{            
					_<#=relationSet#> = new EntityCollection<<#=relation#>,<#=type2#>>(
						<#=set#>,
						(<#=type2.ToLower()#>) => new <#=relation#> { 
							<#=type1#> = this, 
							<#=type2#> = <#=type2.ToLower()#> }, pd=>pd.<#=type2#>);
				}
				return _<#=relationSet#>;
			}
		}
    }
<#+
}
#>
